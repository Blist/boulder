// Code generated by protoc-gen-go.
// source: nonce/proto/nonce.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	nonce/proto/nonce.proto

It has these top-level messages:
	NonceMessage
	ValidMessage
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import core "github.com/letsencrypt/boulder/core/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type NonceMessage struct {
	Nonce            *string `protobuf:"bytes,1,opt,name=nonce" json:"nonce,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NonceMessage) Reset()                    { *m = NonceMessage{} }
func (m *NonceMessage) String() string            { return proto1.CompactTextString(m) }
func (*NonceMessage) ProtoMessage()               {}
func (*NonceMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NonceMessage) GetNonce() string {
	if m != nil && m.Nonce != nil {
		return *m.Nonce
	}
	return ""
}

type ValidMessage struct {
	Valid            *bool  `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ValidMessage) Reset()                    { *m = ValidMessage{} }
func (m *ValidMessage) String() string            { return proto1.CompactTextString(m) }
func (*ValidMessage) ProtoMessage()               {}
func (*ValidMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ValidMessage) GetValid() bool {
	if m != nil && m.Valid != nil {
		return *m.Valid
	}
	return false
}

func init() {
	proto1.RegisterType((*NonceMessage)(nil), "nonce.NonceMessage")
	proto1.RegisterType((*ValidMessage)(nil), "nonce.ValidMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NonceService service

type NonceServiceClient interface {
	Nonce(ctx context.Context, in *core.Empty, opts ...grpc.CallOption) (*NonceMessage, error)
	Valid(ctx context.Context, in *NonceMessage, opts ...grpc.CallOption) (*ValidMessage, error)
}

type nonceServiceClient struct {
	cc *grpc.ClientConn
}

func NewNonceServiceClient(cc *grpc.ClientConn) NonceServiceClient {
	return &nonceServiceClient{cc}
}

func (c *nonceServiceClient) Nonce(ctx context.Context, in *core.Empty, opts ...grpc.CallOption) (*NonceMessage, error) {
	out := new(NonceMessage)
	err := grpc.Invoke(ctx, "/nonce.NonceService/Nonce", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nonceServiceClient) Valid(ctx context.Context, in *NonceMessage, opts ...grpc.CallOption) (*ValidMessage, error) {
	out := new(ValidMessage)
	err := grpc.Invoke(ctx, "/nonce.NonceService/Valid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NonceService service

type NonceServiceServer interface {
	Nonce(context.Context, *core.Empty) (*NonceMessage, error)
	Valid(context.Context, *NonceMessage) (*ValidMessage, error)
}

func RegisterNonceServiceServer(s *grpc.Server, srv NonceServiceServer) {
	s.RegisterService(&_NonceService_serviceDesc, srv)
}

func _NonceService_Nonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NonceServiceServer).Nonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nonce.NonceService/Nonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NonceServiceServer).Nonce(ctx, req.(*core.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NonceService_Valid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NonceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NonceServiceServer).Valid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nonce.NonceService/Valid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NonceServiceServer).Valid(ctx, req.(*NonceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NonceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nonce.NonceService",
	HandlerType: (*NonceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Nonce",
			Handler:    _NonceService_Nonce_Handler,
		},
		{
			MethodName: "Valid",
			Handler:    _NonceService_Valid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nonce/proto/nonce.proto",
}

func init() { proto1.RegisterFile("nonce/proto/nonce.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcf, 0xcb, 0xcf, 0x4b,
	0x4e, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x07, 0xb3, 0xf5, 0xc0, 0x6c, 0x21, 0x56, 0x30,
	0x47, 0x4a, 0x34, 0x39, 0xbf, 0x08, 0x26, 0x0d, 0x62, 0x42, 0x64, 0x95, 0x54, 0xb8, 0x78, 0xfc,
	0x40, 0xf2, 0xbe, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x42, 0x22, 0x5c, 0x10, 0xf5, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x10, 0x0e, 0x48, 0x55, 0x58, 0x62, 0x4e, 0x66, 0x0a, 0x92, 0xaa,
	0x32, 0x10, 0x1f, 0xac, 0x8a, 0x23, 0x08, 0xc2, 0x31, 0x2a, 0x80, 0x9a, 0x15, 0x9c, 0x5a, 0x54,
	0x96, 0x99, 0x9c, 0x2a, 0xa4, 0xcd, 0xc5, 0x0a, 0xe6, 0x0b, 0x71, 0xeb, 0x81, 0x6d, 0x74, 0xcd,
	0x2d, 0x28, 0xa9, 0x94, 0x12, 0xd6, 0x83, 0xb8, 0x0e, 0xd9, 0x5a, 0x25, 0x06, 0x21, 0x63, 0x2e,
	0x56, 0xb0, 0x15, 0x42, 0xd8, 0xe4, 0xe1, 0x9a, 0x90, 0x5d, 0xa1, 0xc4, 0xe0, 0xc4, 0x1e, 0xc5,
	0x0a, 0xf6, 0x06, 0x20, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x63, 0x26, 0x19, 0xfe, 0x00, 0x00, 0x00,
}
